name: Build Ursina APK

on:
  schedule:
    - cron: '0 0 * * *' # Run daily at midnight UTC
  push:
    branches:
      - master # Also trigger on push to main for testing
    tags:
      - 'v*'   # trigger on any tag starting with v
  workflow_dispatch: 

jobs:
  build-apk:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      # 1) Checkout repository (full history)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history required for git log
          ref: master

      # 2) Export event name so PowerShell can use it
      - name: Export event name
        run: echo "GITHUB_EVENT_NAME=${{ github.event_name }}" >> $GITHUB_ENV
        shell: pwsh

      # 3) Check for commits in last 24 hours (for schedule) or force build for push
      - name: Check for changes
        id: check_changes
        run: |
          # Use PowerShell on Windows runners
          if ($env:GITHUB_EVENT_NAME -eq "schedule") {
            # list commits on origin/main in the last 24 hours
            $changes = git log origin/main --since="24 hours ago" --oneline
          } else {
            # push triggers => build
            $changes = "force_build"
          }

          if ($null -ne $changes -and $changes.Trim().Length -gt 0) {
            echo "CHANGES_FOUND=true" >> $env:GITHUB_ENV
          } else {
            echo "CHANGES_FOUND=false" >> $env:GITHUB_ENV
          }
        shell: pwsh

      # 4) Exit early if no changes
      - name: Stop if no changes
        if: env.CHANGES_FOUND == 'false'
        run: |
          echo "No commits in the last 24 hours; skipping build."
          exit 0
        shell: pwsh

      # 5) Setup Python
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      # 6) Setup Java
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      # 7) Install Python deps
      - name: Install Python dependencies
        run: |
          cd src
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m pip install protobuf==3.20.0
          python -m pip install https://buildbot.panda3d.org/downloads/68f0931f43284345893a90d5bba9ba5df8aa53bb/panda3d-1.11.0.dev2480-cp38-cp38-win_amd64.whl
        shell: pwsh

      # 8) Build AAB
      - name: Build AAB
        run: |
          cd src
          python setup.py bdist_apps
        shell: pwsh

      # 9) Generate signing key
      - name: Generate signing key
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cd src
          keytool -genkeypair -alias Echoes-key -keyalg RSA -keysize 2048 -validity 10000 -keystore Echoes.keystore -storepass Echoes123 -keypass Echoes123 -dname "CN=Your Name, OU=YourUnit, O=YourOrg, L=YourCity, ST=YourState, C=YourCountry"
        shell: pwsh

      # 10) Download BundleTool
      - name: Download BundleTool
        run: |
          curl -L -o bundletool.jar https://github.com/google/bundletool/releases/download/1.18.1/bundletool-all-1.18.1.jar
        shell: pwsh

      # 11) Convert AAB to APKS
      - name: Convert AAB to APKS
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          cd src
          java -jar ..\bundletool.jar build-apks --bundle dist\Echoes-1.0.0_android.aab --output dist\Echoes.apks --ks Echoes.keystore --ks-pass pass:Echoes123 --ks-key-alias Echoes-key --key-pass pass:Echoes123 --mode universal --verbose
        shell: pwsh

      # 12) Extract APK
      - name: Extract APK
        run: |
          cd src\dist
          New-Item -ItemType Directory -Path "Echoes_extracted" -Force
          Rename-Item -Path "Echoes.apks" -NewName "Echoes.zip"
          Expand-Archive -LiteralPath "Echoes.zip" -DestinationPath "Echoes_extracted" -Force
        shell: pwsh

      # 13) Upload APK artifact (wildcard to be robust to name)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Echoes-apk
          path: src/dist/Echoes_extracted/**/*.apk
          retention-days: 7

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Push Tag
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git tag v${{ github.run_number }}
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }} v${{ github.run_number }}

      - name: Checkout the Tag
        run: |
          git fetch --tags
          git checkout v${{ github.run_number }}

      # 14) Upload APK to GitHub Release
      - name: Create Release and upload APK
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ github.run_number }}
          name: Echoes v${{ github.run_number }}
          body: "Download the latest APK of Echoes"
          token: ${{ secrets.PAT_TOKEN }}
          allowUpdates: true
          files: src/dist/Echoes_extracted/**/*.apk