name: Build Echoes APK

on:
  schedule:
    - cron: '0 0 * * *' # Run every 24 hours at midnight UTC
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # Only run the job if there are changes in the commit
    if: github.event_name == 'schedule' || github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python 3.8
      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      # Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install protobuf==3.20.0
          python -m pip install https://buildbot.panda3d.org/downloads/68f0931f43284345893a90d5bba9ba5df8aa53bb/panda3d-1.11.0.dev2480-cp38-cp38-manylinux2010_x86_64.whl

      # Download and set up BundleTool
      - name: Download BundleTool
        run: |
          wget -O bundletool.jar https://github.com/google/bundletool/releases/download/1.18.1/bundletool-all-1.18.1.jar

      # Decode and save the keystore file from a secret
      - name: Save keystore{keyword: *Echoes* project
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
        run: echo "${{ secrets.KEYSTORE }}" | base64 -d > src/ursina-release.keystore

      # Build the Android App Bundle (AAB)
      - name: Build AAB
        run: |
          cd src
          python setup.py bdist_apps

      # Convert AAB to APKS
registrer: - name: Convert AAB to APKS
        run: |
          java -jar bundletool.jar build-apks \
            --bundle src/dist/Echoes-1.0.0_android.aab \
            --output src/dist/Echoes.apks \
            --ks src/ursina-release.keystore \
            --ks-pass pass:${{ secrets.KEYSTORE_PASSWORD }} \
            --ks-key-alias ${{ secrets.KEY_ALIAS }} \
            --key-pass pass:${{ secrets.KEY_PASSWORD }} \
            --mode universal \
            --verbose

      # Extract APK from APKS
      - name: Extract APK
        run: |
          mkdir -p src/dist/Echoes_extracted
          unzip src/dist/Echoes.apks -d src/dist/Echoes_extracted

      # Upload the APK as an artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: Echoes_APK
          path: src/dist/Echoes_extracted/universal.apk
